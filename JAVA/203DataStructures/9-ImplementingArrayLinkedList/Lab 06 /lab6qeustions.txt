24.1 Suppose list is an instance of  MyList , can you get an iterator for  list using list.iterator() ? Yes
24.2 Can you create a list using  new MyAbstractList() ? No
24.3 What methods in  MyList are overridden in  MyAbstractList ? add, is empty, size, remove
24.4 What are the benefits of defining both the  MyList interface and the  MyAbstractList class? dont have to type new methods each time if you wanted to create new class with same methods.
24.5 What are the limitations of the array data type? set size only once and must contain values of the same data type
24.6 MyArrayList is implemented using an array, and an array is a fixed-size data struc-ture. Why is  MyArrayList considered a dynamic data structure? because of the ensureCapacity method allows the size to change
24.7 Show the length of the array in  MyArrayList after each of the following statements is executed. = size is one
1 MyArrayList<Double> list = new MyArrayList<>();
2 list.add(1.5);
3 list.trimToSize();
4 list.add(3.4);
5 list.add(7.4);
6 list.add(17.4);

24.8 What is wrong if lines 11–12 in Listing 24.3, MyArrayList.java,
for (int i = 0; i < objects.length; i++)
add(objects[i]);
are replaced by
super(objects);
or
data = objects;
size = objects.length;
you are only adding the address and no the values of the objects
24.9 If you change the code in line 33 in Listing 24.3, MyArrayList.java, from
E[] newData = (E[])(new Object[size * 2 + 1]);
to
E[] newData = (E[])(new Object[size * 2]);
the program is incorrect. Can you find the reason?
because there is a trimToSize method that changes the capacity
24.10 Will the  MyArrayList class have memory leak if the following code in line 41 isdeleted?
data = (E[])new Object[INITIAL_CAPACITY]; yes because you cant instantiate new array of generics
24.11 The get(index) method invokes the  checkIndex(index) method (lines 59–63 in Listing 24.3) to throw an  IndexOutOfBoundsException if the index is out of bounds. Suppose the  add(index, e) is implemented as follows:
public void add(int index, E e) {
checkIndex(index);
// Same as lines 17-27 in Listing 24.3 MyArrayList.java
}
What will happen if you run the following code?
MyArrayList<String> list = new MyArrayList<>();
list.add("New York"); it will try and check for index